module.exports = {

    sendStartMessage: function (tg, message) {
        let text = '<b>–û–∑–æ–Ω–æ–≤–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ OZONE BOX \n</b>' +
            '\n' +
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥  –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, –∞ —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n' +
            '\n' +
            '\n'


        let catalogButton = {
            text: '–ù–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è  üåü',
            callback_data: 'catalogCmd'

        }

        let FAQButton = {
            text: "FAQ  ‚ùì",
            callback_data: 'FAQCmd'
        }

        let aboutButton = {
            text: "–û –Ω–∞—Å  ‚≠êÔ∏è",
            callback_data: 'aboutCmd'
        }

        let principButton = {
            text: "–ü—Ä–∏–Ω—Ü–∏–ø –¥–µ–π—Å—Ç–≤–∏—è  üåê ",
            callback_data: 'principCmd'
        }


        let callBackButton = {
            text: "–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫  ‚òé",
            callback_data: 'callBackCmd'
        }


        let feedBackButton = {
            text: " –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üòò",
            callback_data: 'feedBackCmd'
        }

        let goToBeforeAfter = {
            text: '–î–æ/–ü–æ—Å–ª–µ   üôÄüòª',
            callback_data: 'goToBeforeAfterCmd'

        }
        let options = Object.assign(
            {},
            {
                parse_mode: 'HTML',
                reply_markup: JSON.stringify(
                    {

                        inline_keyboard: [
                            [aboutButton],
                            [principButton],
                            [goToBeforeAfter],
                            [catalogButton],
                            [FAQButton],
                            [callBackButton]
                        ]
                    })
            })
        tg.sendMessage(message.chat.id, text, options)
    },


    sendStartMessage2: function (tg, callbackQuery) {
        let text = '<b>–û–∑–æ–Ω–æ–≤–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ OZONE BOX \n</b>' +
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥  –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, –∞ —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n' +
            '\n' +
            '\n'


        let catalogButton = {
            text: '–ù–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è  üåü',
            callback_data: 'catalogCmd'

        }

        let FAQButton = {
            text: "FAQ  ‚ùì",
            callback_data: 'FAQCmd'
        }

        let aboutButton = {
            text: "–û –Ω–∞—Å  ‚≠êÔ∏è",
            callback_data: 'aboutCmd'
        }

        let principButton = {
            text: "–ü—Ä–∏–Ω—Ü–∏–ø –¥–µ–π—Å—Ç–≤–∏—è  üåê ",
            callback_data: 'principCmd'
        }


        let callBackButton = {
            text: "–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫  ‚òé",
            callback_data: 'callBackCmd'
        }

        let goToBeforeAfter = {
            text: '–î–æ/–ü–æ—Å–ª–µ   üôÄüòª',
            callback_data: 'goToBeforeAfterCmd'

        }

        let feedBackButton = {
            text: " –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üòò",
            callback_data: 'feedBackCmd'
        }

        let options = Object.assign(
            {},
            {
                parse_mode: 'HTML',
                reply_markup: JSON.stringify(
                    {

                        inline_keyboard: [
                            [aboutButton],
                            [principButton],
                            [goToBeforeAfter],
                            [catalogButton],
                            [FAQButton],
                            [callBackButton]
                        ]
                    })
            },
            {
                message_id: callbackQuery.message.message_id,
                chat_id: callbackQuery.message.chat.id
            }
        )
        tg.editMessageText(text, options)
    }
}