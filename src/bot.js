import TelegramBot from 'node-telegram-bot-api'

let botan = require('botanio')('786f747c-6fe7-4a7f-95a6-c8ef510a59f0')

let mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/test', {useMongoClient: true, promiseLibrary: global.Promise});

let Schema = mongoose.Schema;

let userSchema = new Schema({
    first_name: String,
    last_name: String,
    message_text: String,
    date: Number,
    //hidden: Boolean,
    chat_id: Number
});

let userNumberSchema = new Schema({
    first_name: String,
    last_name: String,
    message_text: String,
    date: {type: Date, default: Date.now},
    //hidden: Boolean,
    chat_id: Number,
    number: String
});

let userReviewSchema = new Schema({
    first_name: String,
    last_name: String,
    message_text: String,
    date: Number,
    chat_id: Number,
    review: String
});

let User = mongoose.model('User', userSchema)
let UserNumber = mongoose.model('UserNumber', userNumberSchema)
let UserReview = mongoose.model('UserReview', userReviewSchema)


let tg

function create() {
//  const token = "387016243:AAEXimznXpHl5ke6qpUanexj_Wm9mH79y_s"
    const token = "467244885:AAHILNeTqyldJJzC4XLyfbIl8JxmdK8w62A"
    tg = new TelegramBot(token, {
        polling: true
    })
    tg.on('message', onMessage)
    tg.on('callback_query', onCallbackQuery)
}


function onMessage(message) {
    console.log('message:', message)

    botan.track(message, 'Start', (err) => {
        if (err) {
            console.log("ANALYTICS ERROR: ", err)
        }
    })

    User.create({

        first_name: message.from.first_name,
        last_name: message.from.last_name,
        message_text: message.text,
        chat_id: message.chat.id,
        date: message.date
    }, function (err) {

        if (err) return handleError(err);
    })


    if (message.text && message.text.toLowerCase() === 'ping') {
        tg.sendMessage(message.chat.id, '<b>pong</b> <strong>holy shit</strong> <em>rrr</em> <i>ololo</i>', {
            parse_mode: 'HTML'
        })
        return
    }

    if (message.text && message.text.toLowerCase() === '/start') {
        sendStartMessage(message)
        return
    }

}


function onCallbackQuery(callbackQuery) {

    console.log('callbackQuery:', callbackQuery);

    if (callbackQuery.data === 'catalogCmd') {
        const goToFromMenu1 = goToCatalog(callbackQuery)
    }

    else if (callbackQuery.data === 'menuCmd') {

        const goToMenu = sendStartMessage2(callbackQuery)
    }

    else if (callbackQuery.data === 'catalogHair') {

        const goToCatalogHair = goToCatalogHair1(callbackQuery)
    }

    else if (callbackQuery.data === 'catalogFace') {
        const goToCatalogFace = goToCatalogFace1(callbackQuery)
    }
    else if (callbackQuery.data === 'catalogBody') {

        const goToCatalogBody = goToCatalogBody1(callbackQuery)
    }
    else if (callbackQuery.data === 'catalogSkin') {

        const goToCatalogSkin = goToCatalogSkin1(callbackQuery)
    }

    else if (callbackQuery.data === 'catalogComplex') {

        const goToCatalogComplex = goToCatalogComplex1(callbackQuery)
    }
    else if (callbackQuery.data === 'catalogOil') {

        const goToCatalogOil = goToCatalogOil1(callbackQuery)
    }

    else if (callbackQuery.data === 'FAQCmd') {
        const goToFromMenu2 = goToFAQ(callbackQuery)
    }

    else if (callbackQuery.data === 'callBackCmd') {
        let getNumberForCallBack = goToCallBack(callbackQuery)
    }

    else if (callbackQuery.data === 'feedBackCmd') {
        const helpText = "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ"

        tg.sendMessage(callbackQuery.message.chat.id, helpText)
        // tg.answerCallbackQuery(message.chat.id, text, answer)
    }
}

// *********************************************
function goToCallBack(callbackQuery) {

    let options = {
        "parse_mode": "Markdown",
        "reply_markup": {
            "force_reply": true,
            "one_time_keyboard": true,
            "resize_keyboard": true,
            "remove_keyboard": true,
            "callback_data": "numberQuery",
            "keyboard": [[{
                text: "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                request_contact: true
            }], ["Cancel"]]
        }
    }

    tg.sendMessage(callbackQuery.message.chat.id,"–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", options)//"text inside"

    User.create({

        first_name: message.from.first_name,
        last_name: message.from.last_name,
        message_text: message.text,
        chat_id: message.chat.id,
        date: message.date,
        number: String
    }, function (err) {

        if (err) return handleError(err);
    })

}

function goToFAQ(callbackQuery) {

    let text = '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ü§ó :'

    let Button1 = {
        text: 'wtf',
        callback_data: '1'
    }

    let Button2 = {
        text: 'Do Androids dream of electric sheep?',
        callback_data: '2'
    }
    let Button3 = {
        text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
        callback_data: 'menuCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalog(callbackQuery) {

    let text = '–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ :'

    let Button1 = {
        text: '–£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏',
        callback_data: 'catalogHair'
    }

    let Button2 = {
        text: '–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º',
        callback_data: 'catalogFace'
    }

    let Button3 = {
        text: '–£—Ö–æ–¥ –∑–∞ —Ç–µ–ª–æ–º',
        callback_data: 'catalogBody'

    }

    let Button4 = {
        text: '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π',
        callback_data: 'catalogSkin'
    }
    let Button5 = {
        text: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥',
        callback_data: 'catalogComplex'
    }

    let Button6 = {
        text: '–û–∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å–ª–æ –û3',
        callback_data: 'catalogOil'
    }

    let Button7 = {
        text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
        callback_data: 'menuCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3],
                        [Button4],
                        [Button5],
                        [Button6],
                        [Button7]

                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogFace1(callbackQuery) {

    let text = '–£–•–û–î –ó–ê –õ–ò–¶–û–ú\n' +
        '\n' +
        '–ü–æ –æ—Ç–∑—ã–≤–∞–º –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–æ–≤, –≤ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –Ω–µ —Ä–µ—à–∞–ª–∏—Å—å –±—ã —Å –ø–æ–º–æ—â—å—é –∫–æ—Å–º–µ—Ç–∏–∫–∏ —Å –æ–∑–æ–Ω–æ–º! –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –æ–∑–æ–Ω–æ–≤—ã—Ö –∫—Ä–µ–º–æ–≤ –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –ª–∏—Ü–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–∂–∏ –∑–∞ —Å—á–µ—Ç –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç–Ω—ã—Ö —Å–∏–ª –∏ —Ä–µ–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.'

    let Button1 = {
        text: 'OZONE CREAM PV500. –û–∑–æ–Ω–æ–≤—ã–π –∫—Ä–µ–º –¥–Ω–µ–≤–Ω–æ–π. –≠–∫—Å–ø—Ä–µ—Å—Å-—É—Ö–æ–¥ (–≤–∞–∫—É—É–º–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω 50 –º–ª)',
        callback_data: 'catalogFaceDayExpress'
    }

    let Button2 = {
        text: 'OZONE CREAM PV500. –û–∑–æ–Ω–æ–≤—ã–π –∫—Ä–µ–º –Ω–æ—á–Ω–æ–π. –†–µ–ª–∞–∫—Å (–≤–∞–∫—É—É–º–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω 50 –º–ª)',
        callback_data: 'catalogFaceNightRelax'
    }

    let Button3 = {
        text: 'OzoneBeauty ¬Æ –ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ —Å –æ–∑–æ–Ω–æ–º. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ –∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞. PV 2000 (–≤–∞–∫—É—É–º–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω, 50 –º–ª)',
        callback_data: 'catalogFacePV20001'
    }

    let Button4 = {
        text: 'OzoneBeauty ¬Æ –ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ —Å –æ–∑–æ–Ω–æ–º. –°—É—Ö–∞—è –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞. PV 2000 (–≤–∞–∫—É—É–º–Ω—ã–π —Ñ–ª–∞–∫–æ–Ω, 50 –º–ª)',
        callback_data: 'catalogFacePV20002'
    }

    let Button5 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }
    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3],
                        [Button4],
                        [Button5]

                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogHair1(callbackQuery) {

    let text = '–ù–∞—à–∏ –æ–∑–æ–Ω–æ–≤—ã–µ –∫—Ä–µ–º-–º–∞—Å–∫–∏ ‚Äî –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å. –û–Ω–∏ –æ–±–ª–∞–¥–∞—é—Ç –±–∞–∫—Ç–µ—Ä–∏—Ü–∏–¥–Ω—ã–º–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ–≥—Ä–∏–±–∫–æ–≤—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏, –æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–æ–µ –∏ –ø—Ä–æ–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü—Ä–æ–π–¥–∏—Ç–µ –∫—É—Ä—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—Å –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤—è—Ç!'

    let Button1 = {
        text: 'OZONE CREAM PV500',
        callback_data: 'catalogHairPV500'

    }

    let Button2 = {
        text: 'OzoneBeauty',
        callback_data: 'catalogHairOzoneBeauty'
    }

    let Button3 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogBody1(callbackQuery) {

    let text = '–£–•–û–î –ó–ê –¢–ï–õ–û–ú –õ–ï–ù–ò–ù–ê\n' +
        '\n' +
        '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω–∞—è —Å–µ—Ä–∏—è ‚Ä¢–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –æ–∑–æ–Ω–∏–¥–æ–≤ —Ä–∞—Å—â–µ–ø–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∂–∏—Ä, –ø–æ–≤—ã—à–∞–µ—Ç —É–ø—Ä—É–≥–æ—Å—Ç—å –∏ —É–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ–∂–∏. –ó–∞–º–µ—Ç–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, —É–º–µ–Ω—å—à–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç ‚Äï–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–æ–π –∫–æ—Ä–∫–∏‚Äñ. ‚Ä¢–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–∑–æ–Ω - –∫—Ä–µ–º–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ª–∏–º—Ñ–æ–¥—Ä–µ–Ω–∞–∂ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –∏–∑ —Ç–∫–∞–Ω–µ–π, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ–π –ø–æ—Ç–µ—Ä–µ –æ–±—ä–µ–º–æ–≤ –∏ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞. ‚Ä¢–ü—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–∑–æ–Ω-–∫—Ä–µ–º —É–ª—É—á—à–∞–µ—Ç —Ç–æ–Ω—É—Å –∫–æ–∂–∏, –ø—Ä–∏–¥–∞–µ—Ç –µ–π —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–æ—Å—Ç—å.'


    let Button1 = {
        text: 'OzoneTherapy¬Æ –û–∑–æ–Ω-–∫—Ä–µ–º –∞–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π. PV 3000. (–±–∞–Ω–∫–∞ 125 –º–ª)',
        callback_data: 'catalogBodyOzoneTherapy'
    }
    let Button2 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogSkin1(callbackQuery) {

    let text = '–ü–†–û–§–ò–õ–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –°–ï–†–ò–Ø OZODERMIS. –û–ó–û–ù–û–í–´–ô –£–•–û–î –ó–ê –ö–û–ñ–ï–ô\n' +
        '\n' +
        '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∫—Ä–µ–º–æ–≤ OZODERMIS. –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ –∫—Ä–µ–º–∞ ‚Äì –æ–∑–æ–Ω–∏–¥—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ª–µ—á–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –∫–æ–∂–∏. –û–∑–æ–Ω–∏–¥—ã –∑–∞—â–∏—â–∞—é—Ç –∫–æ–∂—É –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –±–∞–∫—Ç–µ—Ä–∏–π, –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π, –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞, —É–¥–∞–ª—è—é—Ç —Ç–æ–∫—Å–∏–Ω—ã, –ø–æ–≤—ã—à–∞—é—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥–µ. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è 3 –∫—Ä–µ–º–∞ —Å –æ–∑–æ–Ω–∏–¥–∞–º–∏, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.'

    let Button1 = {
        text: '–ûZODERMIS 3% (80ml)',
        callback_data: 'catalogSkinOzodermis3'

    }

    let Button2 = {
        text: '–ûZODERMIS 5% (50ml)',
        callback_data: 'catalogSkinOzodermis5'
    }
    let Button3 = {
        text: '–ûZODERMIS 10% (30ml)',
        callback_data: 'catalogSkinOzodermis10'
    }
    let Button4 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3],
                        [Button4]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogComplex1(callbackQuery) {

    let text = '–ö–æ–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥ :'
    let Button1 = {
        text: '–ö–û–ú–ü–õ–ï–ö–° ¬´–ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –í–û–õ–û–°¬ª',
        callback_data: 'catalogComplexHair'

    }

    let Button2 = {
        text: '–ö–û–ú–ü–õ–ï–ö–° ¬´–ò–î–ï–ê–õ–¨–ù–û–ï –¢–ï–õ–û¬ª',
        callback_data: 'catalogComplexBody'
    }


    let Button3 = {
        text: '–ö–û–ú–ü–õ–ï–ö–° ¬´–ë–ï–ó–£–ü–†–ï–ß–ù–û –ß–ò–°–¢–ê–Ø –ö–û–ñ–ê¬ª',
        callback_data: 'catalogComplexSkin'
    }
    let Button4 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }

    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3],
                        [Button4]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}

function goToCatalogOil1(callbackQuery) {

    let text = '–û–ó–û–ù–ò–†–û–í–ê–ù–ù–û–ï –ú–ê–°–õ–û –û–¢–†–ò¬Æ\n' +
        '\n' +
        '–ü–æ–∫–∞–∑–∞–Ω–∏—è –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å–µ—Ä–∏–∏ –û–¢–†–ò ¬Æ: –≥–µ—Ä–ø–µ—Å, –∫–æ–Ω–¥–∏–ª–æ–º—ã –æ—Å—Ç—Ä–æ–∫–æ–Ω–µ—á–Ω—ã–µ, —ç–∫–∑–µ–º—ã, –∞—Ç–æ–ø–∏—á–µ—Å–∫–∏–π –¥–µ—Ä–º–∞—Ç–∏—Ç, –ø–∏–æ–¥–µ—Ä–º–∏–∏, –∫–∞–Ω–¥–∏–¥–æ–∑, –≥—Ä–∏–±–∫–æ–≤—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∫–æ–∂–∏ –∏ –Ω–æ–≥—Ç–µ–π, —Ñ—É—Ä—É–Ω–∫—É–ª–µ–∑, –±–∞–ª–∞–Ω–æ–ø–æ—Å—Ç–∏—Ç—ã, –∫–æ–ª—å–ø–∏—Ç—ã, –∫—Ä–∞—É—Ä–æ–∑ –≤—É–ª—å–≤—ã, —É—Ä–µ—Ç—Ä–∏—Ç—ã –∏ –ø—Ä–æ—Å—Ç–∞—Ç–∏—Ç—ã, —Ä–∞–Ω—ã (–≤ —Ç.—á. –≤—è–ª–æ–∑–∞–∂–∏–≤–∞—é—â–∏–µ), –ø—Ä–æ–ª–µ–∂–Ω–∏, —Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–µ —è–∑–≤—ã, –æ–∂–æ–≥–∏, –≥–µ–º–æ—Ä—Ä–æ–π, —Ç—Ä–µ—â–∏–Ω—ã –∑–∞–¥–Ω–µ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞, —Å–æ—Å–∫–æ–≤, —Å—Ç–æ–ø—ã, —Å—Ç–æ–º–∞—Ç–∏—Ç—ã, –≥–∏–Ω–≥–∏–≤–∏—Ç—ã, –∫–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç—ã, –æ—Å—Ç—Ä—ã–µ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É—Ö–∞, –≥–æ—Ä–ª–∞, –Ω–æ—Å–∞ –∏ —Ç.–ø.'

    let Button1 = {
        text: '–û–∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –û–¢–†–ò¬Æ 6 000 (1 —É–ø–∞–∫–æ–≤–∫–∞ = 4 —Ñ–ª–∞–∫–æ–Ω–∞ –ø–æ 25 –º–ª)',
        callback_data: 'catalogOilOtri6'

    }

    let Button2 = {
        text: '–û–∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –û–¢–†–ò¬Æ 12000 (1 —É–ø–∞–∫–æ–≤–∫–∞ = 4 —Ñ–ª–∞–∫–æ–Ω–∞ –ø–æ 25 –º–ª)',
        callback_data: 'catalogOilOtri12'
    }

    let Button3 = {
        text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É',
        callback_data: 'catalogCmd'
    }


    let options = Object.assign(
        {},
        {
            reply_markup: JSON.stringify(
                {
                    inline_keyboard: [
                        [Button1],
                        [Button2],
                        [Button3]
                    ]
                })
        },
        {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id
        }
    )
    tg.editMessageText(text, options)
}


function sendStartMessage(message) {
    let text = ' Ozone Cosmetics bot is here for you: üòò'

    let catalogButton = {
        text: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üòò',
        callback_data: 'catalogCmd'

    }

    let FAQButton = {
        text: "FAQ",
        callback_data: 'FAQCmd'
    }

    let callBackButton = {
        text: "–ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞",
        callback_data: 'callBackCmd'
    }

    let feedBackButton = {
        text: "–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        callback_data: 'feedBackCmd'
    }


    let options = {}
    options.reply_markup = {}
    options.reply_markup.inline_keyboard = []
    options.reply_markup.inline_keyboard.push([catalogButton])
    options.reply_markup.inline_keyboard.push([FAQButton])
    options.reply_markup.inline_keyboard.push([callBackButton])
    options.reply_markup.inline_keyboard.push([feedBackButton])

    tg.sendMessage(message.chat.id, text, options)
}
function sendStartMessage2(callbackQuery) {
    let text = ' Ozone Cosmetics bot is here for you: üòò'

    let catalogButton = {
        text: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
        callback_data: 'catalogCmd'

    }

    let FAQButton = {
        text: "FAQ ",
        callback_data: 'FAQCmd'
    }

    let callBackButton = {
        text: "–ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞",
        callback_data: 'callBackCmd'
    }

    let feedBackButton = {
        text: " –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üòò",
        callback_data: 'feedBackCmd'
    }

    let options = Object.assign(
    {},
    {
        reply_markup: JSON.stringify(
            {
                inline_keyboard: [
                    [catalogButton],
                    [FAQButton],
                    [callBackButton],
                    [feedBackButton]
                ]
            })
    },
    {
        message_id: callbackQuery.message.message_id,
        chat_id: callbackQuery.message.chat.id
    }
)
tg.editMessageText(text, options)
}

create()