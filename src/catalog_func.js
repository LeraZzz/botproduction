module.exports = {

    catalogSkin : function (tg, callbackQuery) {

        const text = 'üåºÔ∏è –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è <b>Ozone Box</b> –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞:'+'\n'


        let Button2 = {
            text: ' –ö–æ–º–ø–ª–µ–∫—Å ¬´–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ —á–∏—Å—Ç–∞—è –∫–æ–∂–∞¬ª  ',
            callback_data: 'idealSkinCmd'
        }

        let Button3 = {
            text: 'miniOzoneBox#3 –î–Ω–µ–≤–Ω–æ–π –ª–∞–π—Ç',
            callback_data: 'mini2Cmd'
        }

        let Button4 = {
            text: 'miniOzoneBox#4 –ù–æ—á–Ω–æ–π –ª–∞–π—Ç',
            callback_data: 'mini3Cmd'
        }


        let Button5 = {
            text: 'miniOzoneBox#5 –î–ª—è —Å—É—Ö–æ–π –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–∂–∏',
            callback_data: 'mini5Cmd'
        }

        let Button6 = {
            text: 'miniOzoneBox#6 –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏',
            callback_data: 'mini6Cmd'
        }

        let Button1 = {
            text: ' üîô ',
            callback_data: 'catalogCmd'
        }


        let options = Object.assign(
            {},
            {
                parse_mode: 'HTML',
                reply_markup: JSON.stringify(
                    {
                        inline_keyboard: [

                            [Button2],
                            /* [Button3],
                              [Button4],
                              [Button5],
                              [Button6],
                            */
                            [Button1]

                        ]
                    })
            },
            {
                message_id: callbackQuery.message.message_id,
                chat_id: callbackQuery.message.chat.id
            }
        )
        tg.editMessageText(text, options)

    },

    catalogHair: function (tg, callbackQuery) {

        const text = '\n' +'üå∏Ô∏è –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è <b>Ozone Box</b> –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏: '+'\n'


        let Button1 = {
            text: ' üîô ',
            callback_data: 'catalogCmd'
        }

        let Button2 = {
            text: '–ö–æ–º–ø–ª–µ–∫—Å ¬´–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å¬ª ',
            callback_data: 'fullHairRecoveryCmd' //goToComplexHair
        }

        let Button3 = {
            text: 'miniOzoneBox#1 –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å',
            callback_data: 'mini1Cmd'
        }


        let Button4 = {
            text: 'miniOzoneBox#2 –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å',
            callback_data: 'mini4Cmd'
        }


        let options = Object.assign(
            {},
            {
                parse_mode: 'HTML',
                reply_markup: JSON.stringify(
                    {
                        inline_keyboard: [

                            [Button2],
                            /* [Button3],
                              [Button4],  */
                            [Button1]

                        ]
                    })
            },
            {
                message_id: callbackQuery.message.message_id,
                chat_id: callbackQuery.message.chat.id
            }
        )
        tg.editMessageText(text, options)


    },
    catalogBody: function (tg, callbackQuery) {

        const text =
            'üå∫ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è <b>Ozone Box</b> –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ —Ç–µ–ª–æ–º '+'\n'




        let Button1 = {
            text: ' üîô ',
            callback_data: 'catalogCmd'
        }

        let Button2 = {
            text: '–ö–æ–º–ø–ª–µ–∫—Å ¬´–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ¬ª',
            callback_data: 'idealBodyCmd' //goToComplexBody
        }

        let options = Object.assign(
            {},
            {
                parse_mode: 'HTML',
                reply_markup: JSON.stringify(
                    {
                        inline_keyboard: [

                            [Button2],
                            /* [Button3],
                              [Button4],
                              [Button5],
                              [Button6],
                            */
                            [Button1]

                        ]
                    })
            },
            {
                message_id: callbackQuery.message.message_id,
                chat_id: callbackQuery.message.chat.id
            }
        )
        tg.editMessageText(text, options)


    }


}